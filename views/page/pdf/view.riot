<page-pdf-view>
  <div class="d-flex flex-column flex-1">
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the pdf.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.forms.0') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>form</b> for the pdf.
    </a>
    
    <div class="row">
      <div class="col chat-column mb-4 mb-lg-0">
        <div class="card">
          <div class="card-body">
            <div each={ (field, i) in props.context.fields } class="card bg-white mb-2">
              <div class="card-body">
                { field.label || field.name }
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col">
        <div each={ (image, i) in props.page.get('data.image.images') } class="vh-100 py-3 text-center">
          <div class="h-100">
            <img src={ image } class="h-100 bg-white rounded border border-secondary img-fluid" />
          </div>
        </div>  
      </div>
    </div>
  </div>

  <script>
    // require base class
    import uuid from 'uuid';
    import dotProp from 'dot-prop';
    import PerfectScrollbar from 'perfect-scrollbar';

    // export default
    export default class PagePdfView {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // bind
        this.init = this.init.bind(this);

        // set force update
        this.scheduleUpdate = () => {
          // update
          this.update();
        };
        this.scheduleDelayedUpdate = () => {
          // delay
          setTimeout(() => this.update(), 1000);
        };
      }

      /**
       * on mounted
       *
       * @param {Array} args
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // init
        this.init();

        // where
        this.props.page.on('reload', this.scheduleUpdate);
        this.props.page.on('data.pdf', this.scheduleDelayedUpdate);
        this.props.page.on('data.model', this.init);
        this.props.page.on('data.image.images', this.scheduleUpdate);

        // on scroll
        $(document).on('scroll', this.onScroll);
      }

      /**
       * on mounted
       *
       * @param {Array} args
       */
      onBeforeUnmount(...args) {
        // where
        this.props.page.removeListener('reload', this.scheduleUpdate);
        this.props.page.removeListener('data.pdf', this.scheduleDelayedUpdate);
        this.props.page.removeListener('data.model', this.init);
        this.props.page.removeListener('data.image.images', this.scheduleUpdate);

        // on scroll
        $(document).off('scroll', this.onScroll);
      }

      /**
       * on scroll
       */
      onScroll(e) {
        // get offset
        const top = $('.chat-column').offset().top - 12;

        // top
        const actualTop = $('html').prop('scrollTop') || $('body').prop('scrollTop');

        // set offset
        const offsetTop = actualTop - top;

        // top
        if (offsetTop > 0) {
          // top
          $('.chat-column > .card').css('margin-top', offsetTop);
        } else {
          $('.chat-column > .card').removeAttr('style');
        }
      }

      /**
       * on updated
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;
        
      }

      /**
       * should update
       */
      shouldUpdate() {
        // check updating
        return !this.__canUpdate;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.ref;
        delete newProps.type;
        delete newProps.item;
        delete newProps.view;
        delete newProps.class;
        delete newProps.struct;
        delete newProps.onItem;

        // return
        return newProps;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Init Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * init
       */
      async init() {
        
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>

  <style>
    .image {
      height   : 100%;
      position : relative;
    }
  </style>
</page-pdf-view>